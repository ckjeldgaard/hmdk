<?php

/**
 * Implements hook_menu().
 */
function instagram_feed_menu() {
  $items['admin/config/system/instagram_feed'] = array(
    'title' => 'Instagram feed settings',
    'description' => 'Manage the Instagram feed module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_instagram_feed_settings_form'),
    'access arguments' => array('administer instagram feed settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function instagram_feed_permission() {
  return array(
    'administer instagram feed settings' => array(
      'title' => t('Administer instagram feed settings'),
    ),
  );
}

/**
 * Implements theme_preprocess_html(). Adding the bjqs.css file.
 */
function instagram_feed_preprocess_html(&$variables) {
  $module_path = drupal_get_path('module', 'instagram_feed');
  $css = $module_path . '/lib/bjqs.css';
  $js = $module_path . '/lib/bjqs-1.3.min.js';
  
  drupal_add_css($css, array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  drupal_add_js($js);
}

/**
 * Removes all special characters from a string.
 *
 * @param string $text The text string to strip.
 * @return The stripped string.
 */
function _safe_text($text) {
  $allowed_chars = "abcdefghijklmnopqrstuvwxyzæäøöåABCDEFGHIJKLMNOPQRSTUVWXYZÆÄØÖÅ0123456789 #.,-!_?+%/'";
  $stripped_string = "";
  for ($i = 0; $i < mb_strlen($allowed_chars); $i++ ) {
    $chars[] = mb_substr($allowed_chars, $i, 1);
  }
  for ($j = 0; $j < mb_strlen($text); $j++ ) {
    $char = mb_substr($text, $j, 1);
    if (in_array($char, $chars)) {
      $stripped_string .= $char;
    }
  }
  // Fix apostrophe:
  $stripped_string = str_replace('#039', "'", $stripped_string);
  return $stripped_string;
}

/**
 * Defines the Instagram feed settings form.
 */
function _instagram_feed_settings_form() {
  $form = array();
  
  // API credentials:
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API credentials'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['api']['client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Client ID'),
    '#default_value' => variable_get('instagram_feed_client_id'),
    '#maxlength' => 128,
    '#required' => TRUE,
    '#description' => t('The Instragram API Client ID string.'),
  );
  $form['api']['client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Client Secret'),
    '#default_value' => variable_get('instagram_feed_client_secret'),
    '#maxlength' => 128,
    '#required' => TRUE,
    '#description' => t('The Instragram API Client Secret string.'),
  );
  
  // General module settings:
  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Module settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['settings']['tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
    '#default_value' => variable_get('instagram_feed_tags'),
    '#maxlength' => 128,
    '#required' => TRUE,
    '#description' => t('Instagram tags (without #) to lookup when automatically fetching images. Separate each tag by comma.'),
    '#tree' => TRUE,
  );
  $form['settings']['num_images'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of images'),
    '#default_value' => variable_get('instagram_feed_num_images', 5),
    '#maxlength' => 2,
    '#size' => 10,
    '#required' => TRUE,
    '#description' => t('The maximum number of imagtes to show in the Instagram feed.'),
  );
  $form['settings']['update_interval'] = array(
    '#type' => 'select',
    '#title' => t('Minimum update interval'),
    '#required' => TRUE,
    '#options' => array(
      0 => t('None'),
      60 => t('1 minute'),
      300 => t('5 minutes'),
      300 => t('10 minutes'),
      3600 => t('1 hour'),
      21600 => t('6 hours'),
      86400 => t('1 day'),
    ),
    '#default_value' => variable_get('instagram_feed_update_interval'),
    '#description' => t('Minimum time between each request to the Instagram API (handled by cron).'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
    '#name' => 'settings'
  );
  $form['fetch'] = array(
    '#type' => 'submit',
    '#value' => t('Fetch Instagram images'),
    '#name' => 'fetch'
  );
  
  return $form;
}

/**
 * Submits the Instagram feed settings form. Saves the form values in the variable system.
 */
function _instagram_feed_settings_form_submit($form_id, &$form_state) {
  if ($form_state['clicked_button']['#name'] == 'settings') {
    variable_set('instagram_feed_client_id', $form_state['values']['client_id']);
    variable_set('instagram_feed_client_secret', $form_state['values']['client_secret']);
    variable_set('instagram_feed_tags', $form_state['values']['tags']);
    variable_set('instagram_feed_num_images', $form_state['values']['num_images']);
    variable_set('instagram_feed_update_interval', $form_state['values']['update_interval']);
    _instagram_feed_fetch_images();
    drupal_set_message(t('Settings saved'));
  }
  if ($form_state['clicked_button']['#name'] == 'fetch') {
    _instagram_feed_fetch_images();
    drupal_set_message(t('Instagram images successfully fetched.'));
  }
}

/**
 * Implements hook_cron(). Scheduled fetching of Instagram images.
 */
function instagram_feed_cron() {
  /* $cron_last = variable_get('cron_last', 0);
  $next_up = $cron_last + variable_get('instagram_feed_update_interval', 0);
  if (time() >= $next_up) {
    _instagram_feed_fetch_images();
  } */
}

/**
 * Fetched images from the Instagram API.
 */
function _instagram_feed_fetch_images() {

  $api_url = 'https://api.instagram.com/v1/tags/!tag/media/recent?client_id=!client_id';
  $client_id = variable_get('instagram_feed_client_id');
  $tags = explode(", ", variable_get('instagram_feed_tags'));
  
  $wtype = 'instagram_feed'; // Default Watchdog type
  
  $transaction = db_transaction();
  $result = db_truncate('instagram_feed')->execute();
  
  foreach ($tags as $tag) {
    $url = format_string($api_url, array('!tag' => $tag, '!client_id' => $client_id));
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    $json_string = curl_exec($ch);
    curl_close($ch);
    
    if ($json_string) {
      
      if ($json = drupal_json_decode($json_string)) {
        if ($json['meta']['code'] == 200) {
          for ($i = 0; $i < variable_get('instagram_feed_num_images', 5); $i++) {
            if (isset($json['data'][$i])) {
              
              // Test image:
              $img_code = check_external_file($json['data'][$i]['images']['low_resolution']['url']);
              if ($img_code == 200) {
                
                //Handle caption text (check validity, remove special symbols, e.g.)
                $txt = $json['data'][$i]['caption']['text'];
                if (is_string($txt) && strlen($txt) > 0 && drupal_validate_utf8($txt)) {
                  $caption = drupal_convert_to_utf8(check_plain($txt), 'utf8');
                  $caption = _safe_text($caption);
                }
                else {
                  $caption = NULL;
                }
                
                $id = db_insert('instagram_feed')
                  ->fields(array(
                    'image_url' => $json['data'][$i]['images']['low_resolution']['url'],
                    'link' => $json['data'][$i]['link'],
                    'tag' => $tag,
                    'caption' => $caption,
                    'created_time' => $json['data'][$i]['created_time'],
                    'fetched_time' => time(),
                  ))->execute();
              }
              else {
                // Image URL doesn't return a valid image:
                watchdog($wtype, "Couldn't fetch a valid image from the URL %url. Returns a %code code.", array('%url' => $json['data'][$i]['images']['low_resolution']['url'], '%code' => $img_code), WATCHDOG_ERROR);
                $transaction->rollback();
              }
            }
          }
        }
        else {
          // Connected to API - but it returns some kind of error:
          watchdog($wtype, "API content from URL %url returns the following error code: %code", array('%url' => $url, '%code' => $json['meta']['code']), WATCHDOG_ERROR);
          $transaction->rollback();
        }
      }
      else {
        // Could connect - but repsonse is not valid JSON:
        watchdog($wtype, "API content from URL %url could not be decoded as valid JSON.", array('%url' => $url), WATCHDOG_ERROR);
        $transaction->rollback();
      }
    }
    else {
      // Couldn't connect:
      watchdog($wtype, "Couldn't open API URL %url", array('%url' => $url), WATCHDOG_ERROR);
      $transaction->rollback();
    }
  }
  
  // Check if any images were fetched:
  $result = db_query('SELECT * FROM {instagram_feed}');
  if ($result->rowCount() == 0) {
    $transaction->rollback();
  }
}

/**
 * Returns the contents of the Instagram feed block.
 */
function instagram_feed_contents() {
  $query = db_select('instagram_feed', 'f');
  $query->fields('f');
  $query->orderBy('created_time', 'DESC');
  $query->range(0, variable_get('instagram_feed_num_images', 5));
  $result = $query->execute();
  
  // Create tag string:
  $tags = $pieces = explode(", ", variable_get('instagram_feed_tags', ''));
  $num_tags = count($tags);
  $tagstring = '';
  if ($num_tags == 1) {
    $tagstring = '#' . $tags[0];
  }
  else if ($num_tags == 2) {
    $tagstring = '#' . $tags[0] . ' ' . t('or') . ' ' . '#' . $tags[1];
  }
  else if ($num_tags > 2) {
    for ($i = 0; $i < ($num_tags-2); $i++) {
      $tagstring .= '#' . $tags[$i] . ", ";
    }
    $tagstring .= '#' . $tags[$num_tags-2] . ' ' . t('or') . ' ' . '#' . $tags[$num_tags-1];
  }
  
  $items = array();
  foreach ($result as $obj) {
    $items[] = $obj;
  }
  return array(
    'items' => $items,
    'tags' => $tagstring,
  );
}

/**
 * Implements hook_block_info().
 */
function instagram_feed_block_info() {
  $blocks['block-instagram-feed'] = array(
    'info' => t('Instagram feed'),
  );
  return $blocks;
}
 
/**
 * Implements hook_block_view().
 */
function instagram_feed_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'block-instagram-feed':
      $block['subject'] = t('Instagram feed');
      $block['content'] = theme('block-instagram-feed', instagram_feed_contents());
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function instagram_feed_theme() {
  return array(
    'block-instagram-feed' => array(
      'template' => 'block--instagram-feed',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'instagram_feed'),
    ),
  );
}

/**
 * Check if an external file exists.
 *
 * @return int Returns the external file's return code.
 */
function check_external_file($url) {
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_NOBODY, true);
  curl_exec($ch);
  $retCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);
  return $retCode;
}