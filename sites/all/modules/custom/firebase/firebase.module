<?php
error_reporting(E_ALL);
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'firebase') . '/' . 'firebase-push.inc';

/**
 * Implements hook_menu().
 */
function firebase_menu() {
  $items['firebase/api/add'] = array(
    'title' => t('Create new user subscriptions and store subscription IDs'),
    'page callback' => '_firebase_api_add_subscription',
    'access arguments' => array('use firebase api'),
    'type' => MENU_CALLBACK,
    'file' => 'firebase.api.inc',
  );
  $items['firebase/api/delete/%/%'] = array(
    'title' => t('Delete user subscriptions'),
    'page callback' => '_firebase_api_delete_subscription',
    'access arguments' => array('use firebase api'),
    'type' => MENU_CALLBACK,
    'file' => 'firebase.api.inc',
  );
  $items['firebase/api/get/%'] = array(
    'title' => t('Get user subscriptions'),
    'page callback' => '_firebase_api_get_subscriptions',
    'access arguments' => array('use firebase api'),
    'type' => MENU_CALLBACK,
    'file' => 'firebase.api.inc',
  );
  $items['firebase/api/notification/%'] = array(
    'title' => t('Get notification for a subscription'),
    'page callback' => '_firebase_api_get_notification',
    'access arguments' => array('use firebase api'),
    'type' => MENU_CALLBACK,
    'file' => 'firebase.api.inc',
  );
  $items['admin/config/system/firebase'] = array(
    'title' => 'Firebase settings',
    'description' => 'Edit Firebase settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_firebase_settings_form'),
    'access arguments' => array('edit firebase settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'firebase.admin.inc',
  );
  $items['admin/config/system/firebase/tab1'] = array(
    'title' => t('Settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/config/system/firebase/subscriptions'] = array(
    'title' => t('Subscriptions'),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_firebase_subscriptions_form'),
    'access arguments' => array('edit firebase settings'),
    'file' => 'firebase.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function firebase_permission() {
  return array(
    'edit firebase settings' => array(
      'title' => t('Edit Firebase settings'),
    ),
    'use firebase api' => array(
      'title' => t('Use Firebase API'),
    )
  );
}

/**
 * Implements hook_cron().
 */
function firebase_cron() {
  $firebase_sync_cron = variable_get('firebase_sync_cron', 0);

  if ($firebase_sync_cron == 1) {
    _firebase_sync();
  }
}

function _firebase_admin_sync() {
  $messages = _firebase_sync();
  foreach ($messages as $msg) {
    drupal_set_message($msg);
  }
}

/**
 * @return array Returns an array of messages.
 */
function _firebase_sync() {
  // header("content-type:text/plain;charset=utf-8");
  $token = _fetch_access_token();
  $return_messages = array();

  $events = _get_events();
  _update_events($events, $token);

  $return_messages[] = t("Updated @count events.", array("@count" => count($events)));

  $provinces = array(
    'koebenhavn' => 'København',
    'nordsjaelland' => 'Nordsjælland',
    'bornholm' => 'Bornholm',
    'sjaelland' => 'Sjælland',
    'fyn' => 'Fyn',
    'syd-soenderjylland' => 'Syd- og Sønderjylland',
    'vestjylland' => 'Vestjylland',
    'midtjylland' => 'Midtjylland',
    'nordjylland' => 'Nordjylland',
    'udlandet' => 'Udlandet'
  );
  _update_provinces($provinces, $token);
  $return_messages[] = t("Updated @count provinces.", array("@count" => count($provinces)));

  $genres = _get_genres();
  _update_genres($genres, $token);
  $return_messages[] = t("Updated @count genres.", array("@count" => count($genres)));

  $artists = _get_artists();
  _update_artists($artists, $token);
  $return_messages[] = t("Updated @count artists.", array("@count" => count($artists)));

  watchdog('firebase', implode(" ", $return_messages), array(),WATCHDOG_INFO, NULL);
  variable_set('firebase_last_sync_run', time());
  return $return_messages;
}

/**
 * @return array Get all artists an array with Node ID as index.
 */
function _get_artists() {
  $sql = "SELECT n.nid, n.title ";
  $sql.= "FROM node n ";
  $sql.= "WHERE n.type = :type AND n.status = :status";

  $rs = db_query($sql, array(':type' => 'artist', ':status' => 1));
  $artists = array();
  foreach ($rs as $row) {
    $artists[$row->nid] = array(
      'name' => $row->title,
      'lowercase' => strtolower($row->title)
    );
  }
  return $artists;
}

/**
 * @return array
 */
function _get_genres() {
  module_load_include('inc', 'pathauto', 'pathauto');
  $genre_taxonomy_vid = 7;

  $genres = array();
  $genre_tree = taxonomy_get_tree($genre_taxonomy_vid);
  foreach ($genre_tree as $genre) {
    if ($genre->parents[0] == 0) {
      $genres[pathauto_cleanstring($genre->name)] = $genre->name;
    }
  }
  asort($genres);
  return $genres;
}

function date_start_cmp($a, $b) {
  if ($a['dateStart'] == $b['dateStart']) {
    return 0;
  }
  return ($a['dateStart'] < $b['dateStart']) ? -1 : 1;
}

function _get_events() {
  $sql = "SELECT n.nid, p.field_province_value AS province ";
  $sql.= "FROM node n ";
  $sql.= "INNER JOIN field_data_field_event_date d ON d.entity_id = n.nid ";
  $sql.= "INNER JOIN field_data_field_venue v ON v.entity_id = n.nid ";
  $sql.= "INNER JOIN field_data_field_province p ON p.entity_id = v.field_venue_tid ";
  $sql.= "WHERE n.type = :type AND d.field_event_date_value > :now AND status = :status ";
  // $sql.= "LIMIT 10 ";

  $rs = db_query($sql, array(':type' => 'concert', ':now' => time(), ':status' => 1));
  foreach ($rs as $row) {
    $node = node_load($row->nid);

    $cancelled = $node->field_cancelled[LANGUAGE_NONE][0]['value'];
    $is_festival = $node->field_is_festival[LANGUAGE_NONE][0]['value'];
    $date_start = $node->field_event_date[LANGUAGE_NONE][0]['value'];
    $date_end = $node->field_event_date[LANGUAGE_NONE][0]['value2'];

    $venue_term = taxonomy_term_load($node->field_venue[LANGUAGE_NONE][0]['tid']);
    $venue = $venue_term->name . ", " . $venue_term->field_address[LANGUAGE_NONE][0]['locality'];

    $title_parts = explode(" - ", $node->title);

    $artists = array();
    $genres = array();
    foreach ($node->field_artists[LANGUAGE_NONE] as $artist) {
      $artist_name = _artist_name($artist['target_id']);
      if ($artist_name) {
        $artists[] = array(
          'id' => $artist['target_id'],
          'name' => $artist_name
        );
      }

      $genre = _artist_genre($artist['target_id']);
      if (!in_array($genre, $genres) && $genre != FALSE) {
        $genres[] = $genre;
      }
    }
    foreach ($node->field_support_artists[LANGUAGE_NONE] as $artist) {
      $artist_name = _artist_name($artist['target_id']);
      if ($artist_name) {
        $artists[] = array(
          'id' => $artist['target_id'],
          'name' => $artist_name
        );
      }

      $genre = _artist_genre($artist['target_id']);
      if (!in_array($genre, $genres) && $genre != FALSE) {
        $genres[] = $genre;
      }
    }

    $events['event-' . $row->nid] = array(
      "cancelled" => (bool)$cancelled,
      "dateEnd" => (int)$date_end,
      "dateStart" => (int)$date_start,
      "festival" => (bool)$is_festival,
      "name" => ($is_festival) ? $node->title : str_replace(' og ', ' & ', $title_parts[0]),
      "venue" => $venue,
      "artists" => $artists,
      "genres" => $genres,
      "province" => $row->province,
      "startTime" => $node->field_start_time[LANGUAGE_NONE][0]['value'],
      "ticketPrice" => $node->field_ticket_price[LANGUAGE_NONE][0]['value'],
      "buyLink" => $node->field_buy_link[LANGUAGE_NONE][0]['url'],
      "facebookLink" => $node->field_facebook_event[LANGUAGE_NONE][0]['url'],
    );

  }

  ksort($events);
  foreach($events as &$month) {
    uasort($month, 'date_start_cmp');
  }

  return $events;
}

function _artist_name($artist_nid) {
  $sql = "SELECT n.title ";
  $sql.= "FROM node n ";
  $sql.= "WHERE n.type = :type AND n.nid = :nid AND status = :status LIMIT 1";
  $rs = db_query($sql, array(':type' => 'artist', ':nid' => $artist_nid, ':status' => 1));

  foreach ($rs as $artist) {
    return $artist->title;
  }
  return FALSE;
}

function _artist_genre($artist_nid) {
  module_load_include('inc', 'pathauto', 'pathauto');

  $sql = "SELECT g.field_artist_genres_tid AS genre_tid ";
  $sql.= "FROM node n ";
  $sql.= "LEFT JOIN field_data_field_artist_genres g ON g.entity_id = n.nid ";
  $sql.= "WHERE n.type = :type AND n.nid = :nid AND n.status = :status LIMIT 1";
  $rs = db_query($sql, array(':type' => 'artist', ':nid' => $artist_nid, ':status' => 1))->fetchAssoc();

  if (is_numeric($rs['genre_tid'])) {
    $genre_tree = taxonomy_get_tree(7);
    foreach ($genre_tree as $g) {
      if ($g->tid == $rs['genre_tid']) {
        if ($g->parents[0] > 0) {
          return pathauto_cleanstring(taxonomy_term_load($g->parents[0])->name);
        } else {
          return pathauto_cleanstring(taxonomy_term_load($g->tid)->name);
        }
      }
    }
  }
  return FALSE;
}

function _update_events(array $events, $token) {
  $firebase_url = variable_get('firebase_url');

  $headers = array(
    'Content-Type: application/json',
    'Authorization: Bearer ' . $token
  );

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $firebase_url . '/data/events/.json');
  curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');
  curl_setopt($curl, CURLOPT_POSTFIELDS, drupal_json_encode($events));
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
  $result = curl_exec($curl);

  curl_close($curl);
}

function _update_provinces(array $provinces, $token) {
  $headers = array(
    'Content-Type: application/json',
    'Authorization: Bearer ' . $token
  );

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, variable_get('firebase_url') . '/data/provinces/.json');
  curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');
  curl_setopt($curl, CURLOPT_POSTFIELDS, drupal_json_encode($provinces));
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
  $result = curl_exec($curl);

  curl_close($curl);
}

function _update_artists(array $artists, $token) {
  $headers = array(
    'Content-Type: application/json',
    'Authorization: Bearer ' . $token
  );

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, variable_get('firebase_url') . '/data/artists/.json');
  curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');
  curl_setopt($curl, CURLOPT_POSTFIELDS, drupal_json_encode($artists));
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
  $result = curl_exec($curl);

  curl_close($curl);
}

function _update_genres(array $genres, $token) {
  $headers = array(
    'Content-Type: application/json',
    'Authorization: Bearer ' . $token
  );

  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, variable_get('firebase_url') . '/data/genres/.json');
  curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');
  curl_setopt($curl, CURLOPT_POSTFIELDS, drupal_json_encode($genres));
  curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
  $result = curl_exec($curl);

  curl_close($curl);
}

function _fetch_access_token() {
  module_load_include('php', 'firebase', 'google-api-php-client/vendor/autoload');

  $client = new Google_Client();
  $service_account_file = _service_account_file();

  $client->setApplicationName(variable_get('firebase_application_name'));
  $client->setAuthConfig($service_account_file->uri);
  $client->setScopes([
    'https://www.googleapis.com/auth/firebase.database',
    Google_Service_Oauth2::USERINFO_EMAIL
  ]);

  $client->fetchAccessTokenWithAssertion();
  $token = $client->getAccessToken();
  $accessToken = $token['access_token'];
  return $accessToken;
}

function _service_account_file() {
  $firebase_service_account_file = variable_get('firebase_service_account_file');
  if (isset($firebase_service_account_file->fid)) {
    $file = file_load($firebase_service_account_file->fid);
    if ($file) {
      return $firebase_service_account_file;
    }
  }
  return false;
}
