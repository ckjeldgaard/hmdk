<?php

/**
 * Implements hook_menu().
 */
function workflow_menu() {
  $items['admin/config/system/editor_messages'] = array(
    'title' => 'Edit editor messages',
    'description' => 'Edit the message note for reviewers displayed on the dashboard.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_editor_messages_settings_form'),
    'access arguments' => array('edit editor messages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'workflow.admin.inc',
  );
  return $items;
}

/**
 * Unpromote nodes from frontpage that are no longer in the top on every cron run.
 */
function workflow_cron() {

  // Build array of current frontpage item node ID's:
  $front = views_get_view_result('frontpage_mosaic');
  $current_frontpage_nids = array();
  foreach ($front as $obj) {
    $current_frontpage_nids[] = $obj->nid;
  }
  
  // Unpromote every node not in current frontpage
  $upd = db_update('node')
    ->fields(array(
      'promote' => 0,
    ))
    ->condition('promote', 1)
    ->condition('nid', $current_frontpage_nids, 'NOT IN');

  $upd_rev = db_update('node_revision')
    ->fields(array(
      'promote' => 0,
    ))
    ->condition('promote', 1)
    ->condition('nid', $current_frontpage_nids, 'NOT IN');

  $num_updated = $upd->execute();
  $num_rev_updated = $upd_rev->execute();
  
  if ($num_updated > 0) {
    watchdog('workflow', 'Unpromoted %num nodes from frontpage on cron run.', array('%num' => $num_updated), WATCHDOG_INFO, NULL);
  }
}

/**
 * Implements hook_block_info().
 */
function workflow_block_info() {
  $blocks['block-unreviewed-releases'] = array(
    'info' => t('Unreviewed releases'),
  );
  $blocks['block-my-reviews'] = array(
    'info' => t('My reviews'),
  );
  $blocks['block-reviews-in-progress'] = array(
    'info' => t('Reviews in progress'),
  );
  $blocks['block-latest-activity'] = array(
    'info' => t('Latest activity'),
  );
  $blocks['block-editor-messages'] = array(
    'info' => t('Editor messages'),
  );
  $blocks['block-accreditations'] = array(
    'info' => t('Accreditations'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function workflow_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'block-unreviewed-releases':
      $block['subject'] = t('Unreviewed releases');
      $block['content'] = theme('block-unreviewed-releases', array('content' => _block_unreviewed_releases()));
      break;
    case 'block-my-reviews':
      $block['subject'] = t('My reviews');
      $block['content'] = theme('block-my-reviews', array('content' => _block_my_reviews()));
      break;
    case 'block-reviews-in-progress':
      $block['subject'] = t('Reviews in progress');
      $block['content'] = theme('block-reviews-in-progress', array('content' => _block_reviews_in_progress()));
      break;
    case 'block-latest-activity':
      $block['subject'] = t('Latest activity');
      $block['content'] = theme('block-latest-activity', array('content' => _block_latest_activity()));
      break;
    case 'block-editor-messages':
      $block['subject'] = t('Editor messages');
      $block['content'] = theme('block-editor-messages', array('content' => _block_editor_messages()));
      break;
    case 'block-accreditations':
      $block['subject'] = t('Concert accreditations');
      $block['content'] = theme('block-accreditations', array('content' => _block_accreditations()));
      break;
  }
  return $block;
}


/**
 * Implements hook_theme().
 */
function workflow_theme() {
  return array(
    'block-unreviewed-releases' => array(
      'template' => 'block--block-unreviewed-releases',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
    'block-my-reviews' => array(
      'template' => 'block--block-my-reviews',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
    'block-reviews-in-progress' => array(
      'template' => 'block--block-reviews-in-progress',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
    'block-latest-activity' => array(
      'template' => 'block--block-latest-activity',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
    'block-editor-messages' => array(
      'template' => 'block--block-editor-messages',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
    'block-accreditations' => array(
      'template' => 'block--block-accreditations',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function workflow_permission() {
  return array(
    'delete unreviewed releases' => array(
      'title' => t('Delete unreviewed releases'),
    ),
    'edit editor messages' => array(
      'title' => t('Edit editor messages'),
    )
  );
}

/**
 * Get deadline.
 *
 * @return Returns an HTML human-readable date string in either green or red.
 */
function _deadline($ts) {
  $deadline = $ts - 259200; // 3 days
  $now = time();
  if ($deadline > $now) {
    $interval = $deadline - $now;
    return '<span style="color:green">' . format_interval($interval) . " " . t('left') . '</span>';
  } else {
    $interval = $now - $deadline;
    return '<span style="color:red">' . t('Exceeded by') . " " . format_interval($interval) . '</span>';
  }
}

/**
 * Get the first artist genre by release.
 *
 * @param $release_nid Node ID of the release's artist to lookup.
 * @return string|bool Returns a genre name if found. FALSE otherwise.
 */
function _get_artist_genre_by_release($release_nid) {
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('name'));
  $query->join('field_data_field_artist_genres', 'g', 'g.field_artist_genres_tid = t.tid');
  $query->join('field_data_field_artist', 'a', 'a.field_artist_target_id = g.entity_id');
  $query->condition('a.entity_id', $release_nid);
  $query->range(0, 1);
  $obj = $query->execute()->fetchObject();
  
  if (is_object($obj)) {
    return $obj->name;
  }
  return FALSE;
}

/**
 * Creates a sortable table displaying releases with no reviews attached.
 */
function _block_unreviewed_releases() {

  $element = 0; // Integer to distinguish between multiple pagers on same page.

  $header = array(
    array('data' => t('Name'), 'field' => 'title'),
    array('data' => t('Priority'), 'field' => 'field_priority_value'),
    array('data' => t('Release date'), 'field' => 'field_release_date_value', 'sort' => 'desc'),
    t('Deadline'),
    array('data' => t('Artist genre')),
    array('data' => t('Actions')),
    array('data' => t('Create review')),
  );
  
  # set the database table
  $query = db_select('node', 'n')
    ->extend('PagerDefault')->element($element)
    ->limit(20)
    ->extend('TableSort')
    ->orderByHeader($header);
  $query->fields('n', array('nid', 'title'));
  $query->fields('d', array('field_release_date_value'));
  $query->fields('p', array('field_priority_value'));
  $query->join('field_data_field_release_date', 'd', 'd.entity_id = n.nid');
  $query->leftJoin('field_data_field_priority', 'p', 'p.entity_id = n.nid');
  $query->leftJoin('field_data_field_release', 'r', 'r.field_release_target_id = n.nid');
  $query->condition('n.status', 1);
  $query->condition('n.type', 'release');
  $query->condition('r.entity_id', NULL);
  
  $results = $query->execute();

  # build the table fields
  $rows = array();
  foreach ($results as $row) {
    $rows[] = array(
      $row->title,
      _priority($row->field_priority_value),
      format_date($row->field_release_date_value, 'displaydate_short'),
      _deadline($row->field_release_date_value),
      _get_artist_genre_by_release($row->nid),
      l(t('edit'), 'node/' . $row->nid . '/edit') . '&emsp;' . l(t('delete'), 'node/' . $row->nid . '/delete'),
      l(t('Create review'), 'node/add/review', array('query' => array('release_nid' => $row->nid))),
    );
  }
  
  $output = theme('table', array('header' => $header, 'rows' => $rows ));

  # add the pager
  $pager = array('#theme' => 'pager', '#element' => $element);
  $output .= render($pager);
  
  global $pager_total_items;
  
  $form = drupal_get_form('_delete_unreviewed_form', $pager_total_items[0]);

  return array(
    'form' => $form,
    'table' => $output,
    'count' => $pager_total_items[0],
  );
}

function _priority($priority) {
  $none = '(' . t('None') . ')';
  $low = '<span style="color:green;font-weight:bold;">' . t('Low') . '</span>';
  $medium = '<span style="color:#dadc0a;font-weight:bold;">' . t('Medium') . '</span>';
  $high = '<span style="color:red;font-weight:bold;">' . t('High') . '</span>';
  
  if ($priority == NULL) {
    return $none;
  }
  switch ($priority) {
    case 0:
      return $low;
    case 1:
      return $medium;
    case 2:
      return $high;
  }
}

/**
 * Creates a sortable table displaying reviews currently in progress.
 */
function _block_reviews_in_progress() {
  
  $element = 1; // Integer to distinguish between multiple pagers on same page.
  $num_per_page = 25;

  $header = array(
    array('data' => t('Name'), 'field' => 'title'),
    array('data' => t('Priority'), 'field' => 'field_priority_value'),
    array('data' => t('Release date'), 'field' => 'field_release_date_value'),
    t('Deadline'),
    array('data' => t('Author'), 'field' => 'name', 'sort' => 'asc'),
    array('data' => t('Actions')),
  );
  
  # set the database table
  $query = db_select('node', 'n')
    ->extend('PagerDefault')->element($element)
    ->limit($num_per_page)
    ->extend('TableSort')
    ->orderByHeader($header);
  $query->fields('n', array('nid', 'title', 'uid'));
  $query->fields('d', array('field_release_date_value'));
  $query->fields('p', array('field_priority_value'));
  $query->fields('u', array('name'));
  $query->join('field_data_field_release', 'r', 'r.entity_id = n.nid');
  $query->join('field_data_field_release_date', 'd', 'd.entity_id = r.field_release_target_id');
  $query->leftJoin('field_data_field_priority', 'p', 'p.entity_id = r.field_release_target_id');
  $query->join('users', 'u', 'n.uid = u.uid');
  $query->condition('n.status', 0);
  $query->condition('n.type', 'review');
  
  $results = $query->execute();
  
  # build the table fields
  $rows = array();
  foreach ($results as $row) {
    $rows[] = array(
      l($row->title, 'node/' . $row->nid),
      _priority($row->field_priority_value),
      format_date($row->field_release_date_value, 'displaydate_short'),
      _deadline($row->field_release_date_value),
      $row->name,
      l(t('edit'), 'node/' . $row->nid . '/edit') . '&emsp;' . l(t('delete'), 'node/' . $row->nid . '/delete'),
    );
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows));

  # add the pager
  $pager = array('#theme' => 'pager', '#element' => $element);
  $output .= render($pager);
  
  global $pager_total_items;
  
  return array(
    'table' => $output,
    'count' => $pager_total_items[1],
  );
}

/**
 * Defines a button form to delete all unreviewed releases.
 */
function _delete_unreviewed_form($form, &$form_state, $num) {
  $form = array();
  
  $onclick = "return confirm('" . t('This button deletes all @num unreviewed releases. This action cannot be undone. Are you sure you want to proceed?', array('@num' => $num)) . "');";
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete all unreviewed releases'),
    '#attributes' => array(
      'onclick' => $onclick,
    ),
  );
    
  return $form;
}

/**
 * Defines a button form to delete all unreviewed releases.
 */
function _delete_unreviewed_form_submit($form, &$form_state) {
  if (user_access('delete unreviewed releases')) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->leftJoin('field_data_field_release', 'r', 'r.field_release_target_id = n.nid');
    $query->condition('n.status', 1);
    $query->condition('n.type', 'release');
    $query->condition('r.entity_id', NULL);
    
    $results = $query->execute();
    $num_deleted = 0;
    foreach ($results as $row) {
      node_delete($row->nid);
      $num_deleted++;
    }
  
    drupal_set_message(t('@num releases were deleted.', array('@num' => $num_deleted)));
  }
}

/**
 * Implement hook_form_alter(). Pre-selects a target release in review add form from get parameter 'release_nid'.
 */
function workflow_form_alter(&$form, $form_state, $form_id) {
  if (isset($_GET['release_nid'])) {
    $release_nid = $_GET['release_nid'];
    if ($form_id == 'review_node_form' && arg(1) == 'add' && is_numeric($release_nid)) {
      $node = node_load($release_nid);
      if ($node->type == 'release') {
	$form['field_release'][LANGUAGE_NONE][0]['target_id']['#entity'] = $node;
	$form['field_release'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $node->title . ' (' . $node->nid . ')';
      }
    }
  }
}

/**
 * Creates a table displaying unpublished reviews that the currently logged in user is responsible for.
 * (I.e. the unpublished review nodes the user is the author of).
 */
function _block_my_reviews() {
  
  global $user;
  
  $header = array(t('Title'), t('Actions'));
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', 'review');
  $query->condition('n.status', 0);
  $query->condition('n.uid', $user->uid);
  $query->orderBy('n.title');
  $results = $query->execute();
  
  $rows = array();
  foreach ($results as $row) {
    $rows[] = array(
      $row->title,
      l(t('edit'), 'node/' . $row->nid . '/edit'),
    );
  }
  
  if (count($rows) > 0) {
    $output = '<p>' . t('Reviews assigned to you:') . "</p>\n";
    $output.= theme('table', array('header' => $header, 'rows' => $rows ));
  } else {
    $output = '<p>' . t('You currently have no reviews.') . "</p>\n";
  }
  
  return $output;
}

/**
 * Creates a table displaying when each board member has published a review.
 */
function _block_latest_activity() {
  $header = array(t('User'), t('Latest publish'));
  $rows = array();
  $roles = array(4, 5); // reviewer and editor
  
  // Get all reviewers:
  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'name'));
  $query->join('users_roles', 'r', 'r.uid = u.uid');
  $query->condition('r.rid', $roles);
  $query->orderBy('u.name');
  $results = $query->execute();
  
  // Get the date of their latest review publish:
  foreach ($results as $row) {
    $query = db_select('publication_date', 'd');
    $query->fields('d', array('published_at'));
    $query->join('node', 'n', 'n.nid = d.nid');
    $query->condition('n.uid', $row->uid);
    $query->condition('n.status', 1);
    $query->condition('n.type', 'review');
    $query->orderBy('d.published_at', 'DESC');
    $query->range(0, 1);
    $pub = $query->execute()->fetchObject();
    
    $rows[] = array(
      'user' => l($row->name, 'user/' . $row->uid),
      'date' => (is_object($pub)) ? $pub->published_at : NULL,
    );
  }
  
  // Sort rows by date:
  usort($rows, "sort_latest_activity");
  
  // Make date column human-readable:
  $now = time();
  for ($i = 0; $i < count($rows); $i++) {
    if ($rows[$i]['date'] > 0) {
      $interval = $now - $rows[$i]['date'];
      $rows[$i]['date'] = format_interval($interval) . ' ' . t('ago');
    } else {
      $rows[$i]['date'] = t('Never');
    }
  }
  
  return theme('table', array('header' => $header, 'rows' => $rows ));;
}

function sort_latest_activity($a, $b) {
  if ($a['date'] == $b['date']) {
    return 0;
  }
  return ($a['date'] < $b['date']) ? 1 : -1;
}

function _block_editor_messages() {
  $message = variable_get('workflow_editor_messages');
  $form = drupal_get_form('_edit_messages_form');
  
  return array(
    'message' => $message['value'],
    'can_edit' => (user_access('edit editor messages')) ? TRUE : FALSE,
    'form' => $form,
  );
}

function _block_accreditations() {
  $days = 4;
  $limit = 86400 * $days;
  
  $header = array(
    t('Concert'),
    t('Reviewers'),
    t('Status'),
    t('Photographer'),
    t('Actions'),
  );
  
  $sql = "SELECT n.nid, n.title, r.field_reviewers_target_id AS reviewer_uid, u.name AS reviewer_name, ";
  $sql.= "s.field_concert_status_value AS status, ";
  $sql.= "p.field_photographer_value AS photographer, ";
  $sql.= "pn.field_photographer_name_value AS photographer_name ";
  $sql.= "FROM node n ";
  $sql.= "LEFT JOIN field_data_field_concert c ON c.field_concert_target_id = n.nid ";
  $sql.= "INNER JOIN field_data_field_reviewers r ON r.entity_id = n.nid ";
  $sql.= "INNER JOIN field_data_field_concert_status s ON s.entity_id = n.nid ";
  $sql.= "INNER JOIN field_data_field_photographer p ON p.entity_id = n.nid ";
  $sql.= "LEFT JOIN field_data_field_photographer_name pn ON pn.entity_id = n.nid ";
  $sql.= "INNER JOIN field_data_field_event_date e ON e.entity_id = n.nid ";
  $sql.= "INNER JOIN users u ON u.uid = r.field_reviewers_target_id ";
  $sql.= "WHERE n.status = :status AND n.type = :type AND c.field_concert_target_id IS NULL AND e.field_event_date_value > (UNIX_TIMESTAMP() - " . $limit . ") ";
  $sql.= "ORDER BY e.field_event_date_value ASC";
  
  $rs = db_query($sql, array(':status' => 1, ':type' => 'concert'));

  $concerts = array();
  foreach ($rs as $row) {
    $concerts[$row->nid] = array(
      'concert' => '<b>' . $row->title . '</b>',
      'reviewer_uid' => $concerts[$row->nid]['reviewer_uid'],
      'status' => _status($row->status),
      'photographer' => $row->photographer == 1 ? t('Yes') : '',
      'actions' => l(t('edit'), 'node/' . $row->nid . '/edit'),
    );
    $concerts[$row->nid]['reviewer_uid'][] = l($row->reviewer_name, 'user/' . $row->reviewer_uid);
    
    if ($row->photographer == 1 && strlen($row->photographer_name) > 0) {
      $concerts[$row->nid]['photographer'].= " (" . $row->photographer_name . ")";
    }
  }
  foreach ($concerts as $nid => $concert) {
    $concerts[$nid]['reviewer_uid'] = implode(", ", $concerts[$nid]['reviewer_uid']);
  }
  
  return theme('table', array('header' => $header, 'rows' => $concerts ));
}

function _status($status) {
  if ($status == -1) {
    return '<span style="color:red;font-weight:bold;">' . t('Mail not sent') . '</span>';
  } else if ($status == 0) {
    return '<span style="color:#dadc0a;font-weight:bold;">' .t('Pending') . '</span>';
  } else if ($status == 1) {
    return '<span style="color:green;font-weight:bold;">' . t('Approved') . '</span>';
  }
}

/**
 * Defines a button form to go to the edit editor messages page.
 */
function _edit_messages_form($form, &$form_state) {
  $form = array();
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Edit editor messages'),
  );
  return $form;
}

function _edit_messages_form_submit($form, &$form_state) {
  drupal_goto('admin/config/system/editor_messages');
}