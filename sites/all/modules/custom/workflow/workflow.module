<?php

/**
 * Implements hook_block_info().
 */
function workflow_block_info() {
  $blocks['block-unreviewed-releases'] = array(
    'info' => t('Unreviewed releases'),
  );
  $blocks['block-my-reviews'] = array(
    'info' => t('My reviews'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function workflow_block_view($delta) {
  $block = array();
  switch ($delta) {
    case 'block-unreviewed-releases':
      $block['subject'] = t('Unreviewed releases');
      $block['content'] = theme('block-unreviewed-releases', array('content' => _block_unreviewed_releases()));
      break;
    case 'block-my-reviews':
      $block['subject'] = t('My reviews');
      $block['content'] = theme('block-my-reviews', array('content' => _block_my_reviews()));
      break;
  }
  return $block;
}


/**
 * Implements hook_theme().
 */
function workflow_theme() {
  return array(
    'block-unreviewed-releases' => array(
      'template' => 'block--block-unreviewed-releases',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
    'block-my-reviews' => array(
      'template' => 'block--block-my-reviews',
      'variables' => array('form' => NULL),
      'path' => drupal_get_path('module', 'workflow'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function workflow_permission() {
  return array(
    'delete unreviewed releases' => array(
      'title' => t('Delete unreviewed releases'),
    )
  );
}

/**
 * Get deadline.
 *
 * @return Returns an HTML human-readable date string in either green or red.
 */
function _deadline($ts) {
  $deadline = $ts - 259200; // 3 days
  $now = time();
  if ($deadline > $now) {
    $interval = $deadline - $now;
    return '<span style="color:green">' . format_interval($interval) . " " . t('left') . '</span>';
  } else {
    $interval = $now - $deadline;
    return '<span style="color:red">' . t('Exceeded by') . " " . format_interval($interval) . '</span>';
  }
}

/**
 * Get the first artist genre by release.
 *
 * @param $release_nid Node ID of the release's artist to lookup.
 * @return string|bool Returns a genre name if found. FALSE otherwise.
 */
function _get_artist_genre_by_release($release_nid) {
  $query = db_select('taxonomy_term_data', 't');
  $query->fields('t', array('name'));
  $query->join('field_data_field_artist_genres', 'g', 'g.field_artist_genres_tid = t.tid');
  $query->join('field_data_field_artist', 'a', 'a.field_artist_target_id = g.entity_id');
  $query->condition('a.entity_id', $release_nid);
  $query->range(0, 1);
  $obj = $query->execute()->fetchObject();
  
  if (is_object($obj)) {
    return $obj->name;
  }
  return FALSE;
}

/**
 * Creates a sortable table displaying releases with no reviews attached.
 */
function _block_unreviewed_releases() {

  $header = array(
    array('data' => t('Name'), 'field' => 'title'),
    array('data' => t('Release date'), 'field' => 'field_release_date_value', 'sort' => 'desc'),
    t('Deadline'),
    array('data' => t('Artist genre')),
    array('data' => t('Actions')),
    array('data' => t('Create review')),
  );
  
  # set the database table
  $query = db_select('node', 'n')
    ->extend('PagerDefault')
    ->limit(20)
    ->extend('TableSort')
    ->orderByHeader($header);
  $query->fields('n', array('nid', 'title'));
  $query->fields('d', array('field_release_date_value'));
  $query->join('field_data_field_release_date', 'd', 'd.entity_id = n.nid');
  $query->leftJoin('field_data_field_release', 'r', 'r.field_release_target_id = n.nid');
  $query->condition('n.status', 1);
  $query->condition('n.type', 'release');
  $query->condition('r.entity_id', NULL);
  
  $results = $query->execute();

  # build the table fields
  $rows = array();
  foreach ($results as $row) {
    $rows[] = array(
      $row->title,
      format_date($row->field_release_date_value, 'displaydate_short'),
      _deadline($row->field_release_date_value),
      _get_artist_genre_by_release($row->nid),
      l(t('edit'), 'node/' . $row->nid . '/edit') . '&emsp;' . l(t('delete'), 'node/' . $row->nid . '/delete'),
      l(t('Create review'), 'node/add/review', array('query' => array('release_nid' => $row->nid))),
    );
  }
  
  $output = theme('table', array('header' => $header, 'rows' => $rows ));

  # add the pager
  $output .= theme('pager');
  
  global $pager_total_items;
  
  $form = drupal_get_form('_delete_unreviewed_form', $pager_total_items[0]);

  return array(
    'form' => $form,
    'table' => $output,
    'count' => $pager_total_items[0],
  );

}

/**
 * Defines a button form to delete all unreviewed releases.
 */
function _delete_unreviewed_form($form, &$form_state, $num) {
  $form = array();
  
  $onclick = "return confirm('" . t('This button deletes all @num unreviewed releases. This action cannot be undone. Are you sure you want to proceed?', array('@num' => $num)) . "');";
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete all unreviewed releases'),
    '#attributes' => array(
      'onclick' => $onclick,
    ),
  );
    
  return $form;
}

/**
 * Defines a button form to delete all unreviewed releases.
 */
function _delete_unreviewed_form_submit($form, &$form_state) {
  if (user_access('delete unreviewed releases')) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->leftJoin('field_data_field_release', 'r', 'r.field_release_target_id = n.nid');
    $query->condition('n.status', 1);
    $query->condition('n.type', 'release');
    $query->condition('r.entity_id', NULL);
    
    $results = $query->execute();
    $num_deleted = 0;
    foreach ($results as $row) {
      node_delete($row->nid);
      $num_deleted++;
    }
  
    drupal_set_message(t('@num releases were deleted.', array('@num' => $num_deleted)));
  }
}

/**
 * Implement hook_form_alter(). Pre-selects a target release in review add form from get parameter 'release_nid'.
 */
function workflow_form_alter(&$form, $form_state, $form_id) {
  if (isset($_GET['release_nid'])) {
    $release_nid = $_GET['release_nid'];
    if ($form_id == 'review_node_form' && arg(1) == 'add' && is_numeric($release_nid)) {
      $node = node_load($release_nid);
      if ($node->type == 'release') {
	$form['field_release'][LANGUAGE_NONE][0]['target_id']['#entity'] = $node;
	$form['field_release'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $node->title . ' (' . $node->nid . ')';
      }
    }
  }
}

/**
 * Creates a table displaying unpublished reviews that the currently logged in user is responsible for.
 * (I.e. the unpublished review nodes the user is the author of).
 */
function _block_my_reviews() {
  
  global $user;
  
  $header = array(t('Title'), t('Actions'));
  
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'title'));
  $query->condition('n.type', 'review');
  $query->condition('n.status', 0);
  $query->condition('n.uid', $user->uid);
  $query->orderBy('n.title');
  $results = $query->execute();
  
  $rows = array();
  foreach ($results as $row) {
    $rows[] = array(
      $row->title,
      l(t('edit'), 'node/' . $row->nid . '/edit'),
    );
  }
  
  if (count($rows) > 0) {
    $output = '<p>' . t('Reviews assigned to you:') . "</p>\n";
    $output.= theme('table', array('header' => $header, 'rows' => $rows ));
  } else {
    $output = '<p>' . t('You currently have no reviews.') . "</p>\n";
  }
  
  return $output;
}
